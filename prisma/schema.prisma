generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum Role {
  DEVELOPER
  CLIENT
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AccountStatus {
  ACTIVE
  BANNED
}

enum ChallengeDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ChallengeStatus {
  DRAFT
  PUBLISHED
  ACTIVE
  JUDGING
  COMPLETED
}

enum SubmissionStatus {
  PENDING
  REVIEWED
  WINNER
  REJECTED
}

// --- MODELS ---

model User {
  id                    String          @default(cuid()) @unique
  email                 String          @unique
  password              String
  role                  Role            @default(DEVELOPER)
  accountStatus         AccountStatus   @default(ACTIVE)
  isVerified            Boolean         @default(false)
  gender                Gender?

  // Profile Information
  firstName             String
  lastName              String?
  companyName           String?
  avatarUrl             String?
  bio                   String?
  skills                String[]
  experience            String?
  
  // Reputation & Earnings
  rating                Float           @default(0)
  totalRatings          Int             @default(0)
  completedChallenges   Int             @default(0)
  earnings              Float           @default(0)

  // Auth Tokens
  verificationToken     String?         @unique
  passwordResetToken    String?         @unique
  passwordResetExpires  DateTime?

  lastLogin             DateTime?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // --- RELATIONS ---
  challenges            Challenge[]
  submissions           Submission[]
  portfolio             PortfolioItem[]
}

model PortfolioItem {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String
  liveUrl     String?
  githubUrl   String?
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
}

model Challenge {
  id            String              @id @default(cuid())
  title         String
  description   String
  requirements  String
  prize         Float
  category      String
  difficulty    ChallengeDifficulty
  status        ChallengeStatus     @default(PUBLISHED)
  tags          String[]
  isFunded      Boolean             @default(false)
  deadline      DateTime

  createdById   String
  createdBy     User                @relation(fields: [createdById], references: [id])
  
  submissions   Submission[]
  files         Json[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model Submission {
  id          String           @id @default(cuid())
  githubRepo  String
  description String
  liveDemo    String?
  status      SubmissionStatus @default(PENDING)
  rating      Int?
  feedback    String?
  
  challengeId String
  challenge   Challenge        @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  developerId String
  developer   User             @relation(fields: [developerId], references: [id], onDelete: Cascade)
  
  files       Json[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}