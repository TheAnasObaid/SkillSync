generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum Role {
  DEVELOPER
  CLIENT
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AccountStatus {
  ACTIVE
  BANNED
}

enum ChallengeDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ChallengeStatus {
  DRAFT
  PUBLISHED
  ACTIVE
  JUDGING
  COMPLETED
}

enum SubmissionStatus {
  PENDING
  REVIEWED
  WINNER
  REJECTED
}

// --- MODELS ---
model User {
  id                    String          @id @default(cuid())
  email                 String          @unique
  // Password is now optional, for users who sign in with Google/GitHub
  password              String?
  role                  Role            @default(DEVELOPER)
  accountStatus         AccountStatus   @default(ACTIVE)
  // gender remains the same
  gender                Gender?

  // Profile Information
  name                  String? // NextAuth uses a generic `name` field
  firstName             String
  lastName              String?
  companyName           String?
  // avatarUrl will be replaced by NextAuth's `image` field
  image                 String? // NextAuth's standard field for profile pictures
  bio                   String?
  skills                String[]
  experience            String?
  
  // Reputation & Earnings
  rating                Float           @default(0)
  totalRatings          Int             @default(0)
  completedChallenges   Int             @default(0)
  earnings              Float           @default(0)

  lastLogin             DateTime?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // NextAuth specific fields
  emailVerified         DateTime?
  accounts              Account[]
  sessions              Session[]

  // --- RELATIONS ---
  challenges            Challenge[]
  submissions           Submission[]
  portfolio             PortfolioItem[]
}

// --- NEXTAUTH.JS MODELS ---

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model PortfolioItem {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String
  liveUrl     String?
  githubUrl   String?
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
}

model Challenge {
  id            String              @id @default(cuid())
  title         String
  description   String
  requirements  String
  prize         Float
  category      String
  difficulty    ChallengeDifficulty
  status        ChallengeStatus     @default(PUBLISHED)
  tags          String[]
  isFunded      Boolean             @default(false)
  deadline      DateTime

  createdById   String
  createdBy     User                @relation(fields: [createdById], references: [id])
  
  submissions   Submission[]
  files         Json[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model Submission {
  id          String           @id @default(cuid())
  githubRepo  String
  description String
  liveDemo    String?
  status      SubmissionStatus @default(PENDING)
  rating      Int?
  feedback    String?
  
  challengeId String
  challenge   Challenge        @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  developerId String
  developer   User             @relation(fields: [developerId], references: [id], onDelete: Cascade)
  
  files       Json[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}